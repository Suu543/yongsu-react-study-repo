# Redux

## Intro

`Redux`: A state management library for JavaScript apps

`Redux`는 장바구니, 로그인 여부 등의 상태를 관리할 때 사용하는 도구입니다. <br />
`Redux`는 다음 사진과 같이 `UI`를 생성하는 `Library or Framework`에 적용이 가능합니다.

<img src="https://camo.githubusercontent.com/a7cdb11b1ef67a12a77526b69b79d5f8cec5a46b99c6bea4e3b7f372a7394a04/68747470733a2f2f63646e2d696d616765732d312e6d656469756d2e636f6d2f6d61782f313230302f312a79366a55395f63647058773561556f664462773967512e706e67" />

`Redux`와 같은 `상태 관리 라이브러리(State Management Library`)는 왜 필요할까요?

<img style="display:block; margin: auto;" src="https://cdn-images-1.medium.com/max/800/1*gmnAxFBgpQFIpN0S8VsSCw.png" />

앞서 만들어본 `AWS_Flash_Cards` 프로젝트는 `QuizBar` 혹은 `FlashCard` 컴포넌트에 이벤트 혹은 상태 값에 변화가 생긴경우, 두 컴포넌트의 공통 부모인 `App` 컴포넌트에 그 상황을 전달해 `App` 컴포넌트의 `State and Props`에 갱신을 가한 후, 변경 사항을 두 자식 컴포넌트에 전달하는 방식으로 동작합니다. 이 방식은 2 ~ 3개 정도의 컴포넌트로 구성된 소규모 앱은 컴포넌트 간의 상호작용에 용이하게 사용할 수 있습니다.

<img style="display:block; margin: auto;" src="https://cdn-images-1.medium.com/max/800/1*KJ7Nlcu1L1cCYKySYHzsKQ.png" />

하지만 다음 사진과 같이 앱의 규모가 커지고 복잡해진 상태에서, 왼쪽 밑 두 번째 컴포넌트에 발생한 변화를 오른쪽 밑 세 번째 컴포넌트에 전달해야 하는 경우, 변경 사항을 반영하는데 수십 개의 컴포넌트를 거쳐서 부모 컴포넌트에 반영하는 등 앱 관리 자체가 너무 복잡해서 관리할 수 없는 수준에 도달할 수 있습니다.

`Redux`는 이러한 상황에 앱 관리 복잡도를 기하급수적으로 낮추고, 더욱더 직관적이고 체계적으로 컴포넌트 상태 관리를 할 수 있습니다.

Redux 적용 사항을 요약해 보겠습니다.
<img src="https://camo.githubusercontent.com/c88f56aca2a6c4eb7ec47059a431b9f74be6f583dde1cb244d61a223b8db23d8/68747470733a2f2f63646e2d696d616765732d312e6d656469756d2e636f6d2f6d61782f313230302f312a647841434864484474777647384131776e3761672d512e706e67" />

1. UI의 각기 다른 부분의 동기화(Sync)를 맞춰야하는 경우

- 사진에 소개된 앱은 5개의 컴포넌트로 구성되어있습니다. 이 중 하나의 상태가 변경되었을 때, 해당 변경 상태를 다른 컴포넌트에 전달해 갱신해야 하는 상황을 생각해보겠습니다. 모든 부분이 같은 상태 값을 가지도록 구현하기 위해서는 많은 코드를 작성해야 하고, 다음과 같은 수고가 발생함을 예측할 수 있습니다.

  - Where: 어디에서 변경이 발생했는가?
  - How: 어떻게 변경 사항을 반영할 것인가?
  - When: 언제 어느 시점을 기준으로 변화를 반영할 것인가?

- 앱을 제작하는 과정에 위와 같은 질문이 떠오른다면, `Redux`를 사용 할 시점입니다.

## Redux

<img src="https://camo.githubusercontent.com/f78fe6a64eb1093a929c369973cb0a133f1672b932da58aefc1b4cdbc6c7a65f/68747470733a2f2f63646e2d696d616765732d312e6d656469756d2e636f6d2f6d61782f313230302f312a2d3257694544796e4238793531396f644258767332672e706e67" />

`Redux`는 `AWS_Flash_Cards`프로젝트에서 사용한 `Prop Drilling (부모 컴포넌트가 자식 컴포넌트에 Props로 데이터를 전달하는 방식)` 대신에, 다음 사진처럼 `중앙 저장소(Central Repository)`에 모든 데이터를 저장해 컴포넌트 간에 데이터를 공유하는 방식으로 동작합니다. 이런 방식을 `Single Source of Truth`라 칭합니다.

컴포넌트가 각자의 `상태(state)`값을 가지는 대신에, `중앙 저장소(Central Repository)`로 부터 데이터에 대한 `CRUD(Create: 생성, Read: 읽기, Update: 갱신, Delete: 삭제)` 요청을 통해 컴포넌트 간의 동기를 맞출 수 있습니다.

결과적으로 다음 사진과 같이 한 곳에서 앱 전체의 상태를 관리하기 때문에, 상태 값에 대한 `how/how/when/where`에 대한 여부를 확실히 파악할 수 있습니다.

<img src="https://camo.githubusercontent.com/d236f007320857d947f4aa1f91577557fece7b54a9f37ae893563e1786e66c35/68747470733a2f2f63646e2d696d616765732d312e6d656469756d2e636f6d2f6d61782f313230302f312a424a6a33446458304c6f31516749426e7259514e6c672e706e67" />

**Summary**

- Centralizes application's state
- Makes data flow transparent and predictable

## Redux and React

## How Redux Works

## Wiring Up Redux

## Connecting Redux and React

## Adding More Reducers to our store

## Adding an action creator and action

## Adding the Dispatcher
